const simpleCountriesData = {
    "United States": {
        "states": [
            "Alabama", "Alaska", "Arizona", "Arkansas", "California", "Colorado", "Connecticut", "Delaware", "District of Columbia", "Florida", "Georgia",
            "Hawaii", "Idaho", "Illinois", "Indiana", "Iowa", "Kansas", "Kentucky", "Louisiana", "Maine", "Maryland",
            "Massachusetts", "Michigan", "Minnesota", "Mississippi", "Missouri", "Montana", "Nebraska", "Nevada", "New Hampshire", "New Jersey",
            "New Mexico", "New York", "North Carolina", "North Dakota", "Ohio", "Oklahoma", "Oregon", "Pennsylvania", "Rhode Island", "South Carolina",
            "South Dakota", "Tennessee", "Texas", "Utah", "Vermont", "Virginia", "Washington", "West Virginia", "Wisconsin", "Wyoming"
        ]
    },
    "Canada": {
        "states": [
            "Alberta", "British Columbia", "Manitoba", "New Brunswick", "Newfoundland and Labrador", "Northwest Territories",
            "Nova Scotia", "Nunavut", "Ontario", "Prince Edward Island", "Quebec", "Saskatchewan", "Yukon"
        ]
    },
    "Australia": {
        "states": [
            "Australian Capital Territory", "New South Wales", "Northern Territory", "Queensland", "South Australia", "Tasmania", "Victoria", "Western Australia"
        ]
    },
    "United Kingdom": {
        "states": [
            "England", "Scotland", "Wales", "Northern Ireland"
        ]
    },
    "Germany": {
        "states": [
            "Baden-Württemberg", "Bavaria", "Berlin", "Brandenburg", "Bremen", "Hamburg", "Hesse", "Lower Saxony", "Mecklenburg-Vorpommern",
            "North Rhine-Westphalia", "Rhineland-Palatinate", "Saarland", "Saxony", "Saxony-Anhalt", "Schleswig-Holstein", "Thuringia"
        ]
    },
    "France": {
        "states": [
            "Auvergne-Rhône-Alpes", "Bourgogne-Franche-Comté", "Brittany", "Centre-Val de Loire", "Corsica", "Grand Est", "Hauts-de-France",
            "Île-de-France", "Normandy", "Nouvelle-Aquitaine", "Occitania", "Pays de la Loire", "Provence-Alpes-Côte d'Azur"
        ]
    },
    "Italy": {
        "states": [
            "Abruzzo", "Basilicata", "Calabria", "Campania", "Emilia-Romagna", "Friuli-Venezia Giulia", "Lazio",
            "Liguria", "Lombardy", "Marche", "Molise", "Piedmont", "Apulia", "Sardinia", "Sicily",
            "Tuscany", "Trentino-Alto Adige", "Umbria", "Valle d'Aosta", "Veneto"
        ]
    },
    "Spain": {
        "states": [
            "Andalusia", "Aragon", "Asturias", "Balearic Islands", "Basque Country", "Canary Islands", "Cantabria",
            "Castile and León", "Castilla-La Mancha", "Catalonia", "Community of Madrid", "Extremadura", "Galicia",
            "La Rioja", "Murcia", "Navarre", "Valencia"
        ]
    },
    "Netherlands": {
        "states": [
            "Drenthe", "Flevoland", "Friesland", "Gelderland", "Groningen", "Limburg", "North Brabant", "North Holland",
            "Overijssel", "South Holland", "Utrecht", "Zeeland"
        ]
    },
    "Belgium": {
        "states": [
            "Brussels-Capital Region", "Flemish Region", "Walloon Region"
        ]
    },
    "Switzerland": {
        "states": [
            "Aargau", "Appenzell Ausserrhoden", "Appenzell Innerrhoden", "Basel-Landschaft", "Basel-Stadt", "Bern",
            "Fribourg", "Geneva", "Glarus", "Grisons", "Jura", "Lucerne", "Neuchâtel", "Nidwalden",
            "Obwalden", "Schaffhausen", "Schwyz", "Solothurn", "St. Gallen", "Thurgau", "Ticino", "Uri",
            "Valais", "Vaud", "Zug", "Zurich"
        ]
    },
    "Austria": {
        "states": [
            "Burgenland", "Carinthia", "Lower Austria", "Upper Austria", "Salzburg", "Styria",
            "Tyrol", "Vorarlberg", "Vienna"
        ]
    },
    "Sweden": {
        "states": [
            "Blekinge", "Dalarna", "Gävleborg", "Gotland", "Halland", "Jämtland", "Jönköping", "Kalmar",
            "Kronoberg", "Norrbotten", "Örebro", "Östergötland", "Skåne", "Södermanland", "Stockholm", "Uppsala",
            "Värmland", "Västerbotten", "Västernorrland", "Västmanland", "Västra Götaland"
        ]
    },
    "Norway": {
        "states": [
            "Agder", "Innlandet", "Møre og Romsdal", "Nordland", "Oslo", "Rogaland",
            "Troms og Finnmark", "Trøndelag", "Vestfold og Telemark", "Vestland", "Viken"
        ]
    },
    "Denmark": {
        "states": [
            "Capital Region of Denmark", "Central Denmark Region", "North Denmark Region", "Region Zealand", "Region of Southern Denmark"
        ]
    },
    "Finland": {
        "states": [
            "Lapland", "North Ostrobothnia", "Kainuu", "North Karelia", "Northern Savonia", "Southern Savonia",
            "South Karelia", "Kymenlaakso", "Päijät-Häme", "Tavastia Proper", "Pirkanmaa", "Satakunta",
            "Ostrobothnia", "South Ostrobothnia", "Central Ostrobothnia", "Central Finland", "Uusimaa", "Southwest Finland", "Åland"
        ]
    },
    "Poland": {
        "states": [
            "Greater Poland", "Kuyavian-Pomeranian", "Lesser Poland", "Lodz", "Lower Silesian", "Lublin", "Lubusz",
            "Masovian", "Opole", "Podlaskie", "Pomeranian", "Silesian", "Subcarpathian", "Swietokrzyskie",
            "Warmian-Masurian", "West Pomeranian"
        ]
    },
    "Czech Republic": {
        "states": [
            "Prague", "Central Bohemian", "South Bohemian", "Plzeň", "Karlovy Vary", "Ústí nad Labem",
            "Liberec", "Hradec Králové", "Pardubice", "Vysočina", "South Moravian", "Olomouc", "Zlín", "Moravian-Silesian"
        ]
    },
    "India": {
        "states": [
            "Andhra Pradesh", "Arunachal Pradesh", "Assam", "Bihar", "Chhattisgarh", "Goa", "Gujarat", "Haryana", "Himachal Pradesh", "Jharkhand",
            "Karnataka", "Kerala", "Madhya Pradesh", "Maharashtra", "Manipur", "Meghalaya", "Mizoram", "Nagaland", "Odisha", "Punjab",
            "Rajasthan", "Sikkim", "Tamil Nadu", "Telangana", "Tripura", "Uttar Pradesh", "Uttarakhand", "West Bengal",
            "Andaman and Nicobar Islands", "Chandigarh", "Dadra and Nagar Haveli and Daman and Diu", "Delhi", "Jammu and Kashmir", "Ladakh", "Lakshadweep", "Puducherry"
        ]
    },
    "China": {
        "states": [
            "Beijing", "Tianjin", "Hebei", "Shanxi", "Inner Mongolia", "Liaoning", "Jilin", "Heilongjiang",
            "Shanghai", "Jiangsu", "Zhejiang", "Anhui", "Fujian", "Jiangxi", "Shandong", "Henan",
            "Hubei", "Hunan", "Guangdong", "Guangxi", "Hainan", "Chongqing", "Sichuan", "Guizhou",
            "Yunnan", "Tibet", "Shaanxi", "Gansu", "Qinghai", "Ningxia", "Xinjiang", "Hong Kong", "Macau", "Taiwan"
        ]
    },
    "Japan": {
        "states": [
            "Hokkaido", "Aomori", "Iwate", "Miyagi", "Akita", "Yamagata", "Fukushima", "Ibaraki",
            "Tochigi", "Gunma", "Saitama", "Chiba", "Tokyo", "Kanagawa", "Niigata", "Toyama",
            "Ishikawa", "Fukui", "Yamanashi", "Nagano", "Gifu", "Shizuoka", "Aichi", "Mie",
            "Shiga", "Kyoto", "Osaka", "Hyogo", "Nara", "Wakayama", "Tottori", "Shimane",
            "Okayama", "Hiroshima", "Yamaguchi", "Tokushima", "Kagawa", "Ehime", "Kochi", "Fukuoka",
            "Saga", "Nagasaki", "Kumamoto", "Oita", "Miyazaki", "Kagoshima", "Okinawa"
        ]
    },
    "South Korea": {
        "states": [
            "Seoul", "Busan", "Daegu", "Incheon", "Gwangju", "Daejeon", "Ulsan", "Sejong",
            "Gyeonggi", "Gangwon", "North Chungcheong", "South Chungcheong", "North Jeolla", "South Jeolla",
            "North Gyeongsang", "South Gyeongsang", "Jeju"
        ]
    },
    "Brazil": {
        "states": [
            "Acre", "Alagoas", "Amapá", "Amazonas", "Bahia", "Ceará", "Distrito Federal", "Espírito Santo", "Goiás", "Maranhão",
            "Mato Grosso", "Mato Grosso do Sul", "Minas Gerais", "Pará", "Paraíba", "Paraná", "Pernambuco", "Piauí", "Rio de Janeiro", "Rio Grande do Norte",
            "Rio Grande do Sul", "Rondônia", "Roraima", "Santa Catarina", "São Paulo", "Sergipe", "Tocantins"
        ]
    },
    "Mexico": {
        "states": [
            "Aguascalientes", "Baja California", "Baja California Sur", "Campeche", "Chiapas", "Chihuahua", "Coahuila", "Colima", "Durango", "Guanajuato",
            "Guerrero", "Hidalgo", "Jalisco", "México", "Michoacán", "Morelos", "Nayarit", "Nuevo León", "Oaxaca", "Puebla",
            "Querétaro", "Quintana Roo", "San Luis Potosí", "Sinaloa", "Sonora", "Tabasco", "Tamaulipas", "Tlaxcala", "Veracruz", "Yucatán", "Zacatecas", "Mexico City"
        ]
    },
    "Argentina": {
        "states": [
            "Buenos Aires", "Catamarca", "Chaco", "Chubut", "Córdoba", "Corrientes", "Entre Ríos", "Formosa", "Jujuy", "La Pampa",
            "La Rioja", "Mendoza", "Misiones", "Neuquén", "Río Negro", "Salta", "San Juan", "San Luis", "Santa Cruz", "Santa Fe",
            "Santiago del Estero", "Tierra del Fuego", "Tucumán", "Ciudad Autónoma de Buenos Aires"
        ]
    },
    "South Africa": {
        "states": [
            "Eastern Cape", "Free State", "Gauteng", "KwaZulu-Natal", "Limpopo", "Mpumalanga", "Northern Cape", "North West", "Western Cape"
        ]
    }
};

// Global countries data storage
let globalCountriesData = {};

function loadCountriesData() {
    // Try to load from WordPress first, then fallback to simple data
    if (typeof affiliate_ajax !== 'undefined' && affiliate_ajax.countries_data) {
        globalCountriesData = affiliate_ajax.countries_data;
        console.log('Countries data loaded from WordPress:', Object.keys(globalCountriesData).length, 'countries');
    } else {
        console.log('Using fallback countries data');
        globalCountriesData = simpleCountriesData;
    }
    
    // Initialize country dropdown functionality
    setTimeout(() => {
        initCountryDropdown();
    }, 100); // Small delay to ensure DOM is ready
}

function initCountryDropdown() {
    const countrySelect = document.getElementById('country');
    if (!countrySelect) {
        console.log('Country select element not found - may not be on registration page');
        return;
    }
    
    console.log('Found country select element, adding change event listener');
    console.log('Available countries in globalCountriesData:', Object.keys(globalCountriesData));
    
    // Add event listener for country selection
    countrySelect.addEventListener('change', function() {
        const selectedCountry = this.value;
        const stateSelect = document.getElementById('state');
        
        console.log('Country selected:', selectedCountry);
        console.log('State select found:', !!stateSelect);
        
        if (!stateSelect) {
            console.error('State select element not found!');
            return;
        }
        
        if (selectedCountry && globalCountriesData[selectedCountry]) {
            const states = globalCountriesData[selectedCountry].states;
            console.log(`Found states for ${selectedCountry}:`, states ? states.length : 'No states');
            
            if (states && states.length > 0) {
                // Clear existing options
                stateSelect.innerHTML = '<option value="">Select State/Province</option>';
                
                // Add states/provinces
                states.forEach(state => {
                    const option = document.createElement('option');
                    option.value = state;
                    option.textContent = state;
                    stateSelect.appendChild(option);
                });
                
                stateSelect.disabled = false;
                stateSelect.removeAttribute('disabled');
                stateSelect.setAttribute('required', 'required');
                console.log(`Successfully loaded ${states.length} states for ${selectedCountry}`);
            } else {
                // No states available, disable select
                stateSelect.innerHTML = '<option value="">No states available</option>';
                stateSelect.disabled = true;
                stateSelect.removeAttribute('required');
                console.log(`No states available for ${selectedCountry}`);
            }
        } else {
            // Reset state dropdown
            stateSelect.innerHTML = '<option value="">Select Country First</option>';
            stateSelect.disabled = true;
            stateSelect.removeAttribute('required');
            console.log('Resetting state dropdown - no country selected or no data available');
        }
    });
    
    console.log('Country change listener added successfully');
}

function loadStates(countryId) {
    console.log('loadStates called for country ID:', countryId);
    
    const stateSelect = document.getElementById('state');
    if (!stateSelect) {
        console.log('State select element not found');
        return;
    }
    
    // Check if states data is available
    if (!window.AffiliateCountriesData || !window.AffiliateCountriesData.states) {
        console.error('States data not loaded');
        return;
    }
    
    const states = window.AffiliateCountriesData.states[countryId];
    console.log('Found states for country', countryId, ':', states);
    
    stateSelect.innerHTML = '<option value="">Select State/Province</option>';
    stateSelect.disabled = false;
    
    if (states && states.length > 0) {
        states.forEach(state => {
            const option = document.createElement('option');
            option.value = state.name;
            option.textContent = state.name;
            stateSelect.appendChild(option);
        });
        console.log('States loaded successfully:', states.length, 'states');
    } else {
        stateSelect.innerHTML = '<option value="">No states available</option>';
        stateSelect.disabled = true;
        console.log('No states found for country ID:', countryId);
    }
}

function resetStates() {
    const stateSelect = document.getElementById('state');
    if (stateSelect) {
        stateSelect.innerHTML = '<option value="">Select Country First</option>';
        stateSelect.disabled = true;
    }
}

// Add loadAffiliateTypes stub function (not needed since affiliate types are hardcoded in form)
function loadAffiliateTypes() {
    // Affiliate types are already hardcoded in the form HTML, no action needed
    console.log('Affiliate types already loaded from HTML');
}

// Admin functionality
function initAdminFunctionality() {
    // Admin login form
    const adminLoginForm = document.getElementById('affiliateAdminLoginForm');
    if (adminLoginForm) {
        adminLoginForm.addEventListener('submit', handleAdminLogin);
    }
    
    // Load admin applications if on admin dashboard
    if (document.getElementById('applications-table')) {
        loadApplications();
        loadEmailConfig();
    }
}

function handleAdminLogin(e) {
    e.preventDefault();
    
    const username = document.getElementById('admin_username').value;
    const password = document.getElementById('admin_password').value;
    
    if (!username || !password) {
        showMessage('Please fill in all fields', 'danger');
        return;
    }
    
    const button = e.target.querySelector('button[type="submit"]');
    const hideLoading = showLoading(button);
    
    const formData = new FormData();
    formData.append('action', 'affiliate_admin_login');
    formData.append('admin_username', username);
    formData.append('admin_password', password);
    formData.append('nonce', affiliate_ajax.nonce);
    
    fetch(affiliate_ajax.ajax_url, {
        method: 'POST',
        body: formData
    })
    .then(response => response.json())
    .then(data => {
        hideLoading();
        
        if (data.success) {
            showMessage(data.data.message, 'success');
            setTimeout(() => {
                window.location.href = data.data.redirect;
            }, 1000);
        } else {
            showMessage(data.data || 'Login failed', 'danger');
        }
    })
    .catch(error => {
        hideLoading();
        showMessage('An error occurred. Please try again.', 'danger');
        console.error('Admin login error:', error);
    });
}

// Pagination variables
let currentPage = 1;
let totalPages = 1;
let totalRecords = 0;
let currentPerPage = 25;

function loadApplications(page = 1) {
    currentPage = page;
    const statusFilter = document.getElementById('status-filter')?.value || '';
    const perPage = document.getElementById('per-page-filter')?.value || 25;
    currentPerPage = parseInt(perPage);
    
    console.log('Loading applications with status filter:', statusFilter, 'page:', page, 'per page:', perPage);
    
    const formData = new FormData();
    formData.append('action', 'affiliate_get_applications');
    formData.append('status', statusFilter);
    formData.append('page', page);
    formData.append('per_page', perPage);
    formData.append('nonce', affiliate_ajax.nonce);
    
    fetch(affiliate_ajax.ajax_url, {
        method: 'POST',
        body: formData
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            populateApplicationsTable(data.data.applications);
            updateStatistics(data.data.stats);
            updatePagination(data.data.pagination);
        } else {
            showMessage('Failed to load applications', 'danger');
            console.error('Failed to load applications:', data.data);
        }
    })
    .catch(error => {
        showMessage('Error loading applications', 'danger');
        console.error('Load applications error:', error);
    });
}

function populateApplicationsTable(applications) {
    const tbody = document.getElementById('applications-tbody');
    if (!tbody) return;
    
    if (applications.length === 0) {
        tbody.innerHTML = '<tr><td colspan="8" class="text-center">No applications found</td></tr>';
        return;
    }
    
    tbody.innerHTML = applications.map(app => `
        <tr>
            <td>${app.name_prefix || ''} ${app.first_name} ${app.last_name}</td>
            <td>${app.email}</td>
            <td>${app.company_name || 'N/A'}</td>
            <td>${app.affiliate_type}</td>
            <td>${app.country}</td>
            <td><span class="status-badge ${app.status.replace(/\s+/g, '-').replace('awaiting-approval', 'awaiting')}">${app.status}</span></td>
            <td>${new Date(app.created_at).toLocaleDateString()}</td>
            <td>
                <button type="button" class="action-btn view" onclick="showRegistrationDetailsModal(${app.id})" style="margin-right: 5px;">
                    <svg width="12" height="12" viewBox="0 0 24 24" fill="currentColor">
                        <path d="M12 4.5C7 4.5 2.73 7.61 1 12c1.73 4.39 6 7.5 11 7.5s9.27-3.11 11-7.5c-1.73-4.39-6-7.5-11-7.5zM12 17c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5zm0-8c-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3-1.34-3-3-3z"/>
                    </svg>
                    View
                </button>
                <button type="button" class="action-btn edit" onclick="showStatusModal(${app.id}, '${app.status}', '${app.admin_remarks || ''}')">
                    <svg width="12" height="12" viewBox="0 0 24 24" fill="currentColor">
                        <path d="M20.71,7.04C21.1,6.65 21.1,6 20.71,5.63L18.37,3.29C18,2.9 17.35,2.9 16.96,3.29L15.12,5.12L18.87,8.87M3,17.25V21H6.75L17.81,9.93L14.06,6.18L3,17.25Z"/>
                    </svg>
                    Edit
                </button>
            </td>
        </tr>
    `).join('');
}

function updateStatistics(stats) {
    console.log('Updating statistics:', stats);
    document.getElementById('pending-count').textContent = stats.pending || 0;
    document.getElementById('approved-count').textContent = stats.approved || 0;
    document.getElementById('rejected-count').textContent = stats.rejected || 0;
}

function showStatusModal(applicationId, currentStatus, currentRemarks) {
    document.getElementById('update_application_id').value = applicationId;
    document.getElementById('new_status').value = currentStatus;
    document.getElementById('admin_remarks').value = currentRemarks;
    document.getElementById('statusUpdateModal').style.display = 'flex';
}

function hideStatusModal() {
    document.getElementById('statusUpdateModal').style.display = 'none';
}

// Registration Details Modal Functions
function showRegistrationDetailsModal(applicationId) {
    const modal = document.getElementById('registrationDetailsModal');
    const content = document.getElementById('registrationDetailsContent');
    
    // Show modal and loading state
    modal.style.display = 'block';
    content.innerHTML = '<div style="text-align: center; padding: 40px;"><div class="loading-spinner"></div><p>Loading registration details...</p></div>';
    
    // Fetch registration details
    const formData = new FormData();
    formData.append('action', 'affiliate_get_registration_details');
    formData.append('application_id', applicationId);
    formData.append('nonce', affiliate_ajax.nonce);
    
    fetch(affiliate_ajax.ajax_url, {
        method: 'POST',
        body: formData
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            displayRegistrationDetails(data.data);
        } else {
            content.innerHTML = '<div style="text-align: center; padding: 40px; color: #dc3545;"><p>Failed to load registration details</p></div>';
        }
    })
    .catch(error => {
        console.error('Error loading registration details:', error);
        content.innerHTML = '<div style="text-align: center; padding: 40px; color: #dc3545;"><p>Error loading registration details</p></div>';
    });
}

function hideRegistrationDetailsModal() {
    document.getElementById('registrationDetailsModal').style.display = 'none';
}

function displayRegistrationDetails(user) {
    const content = document.getElementById('registrationDetailsContent');
    
    const mobileDisplay = user.mobile_number ? 
        (user.country_code && !user.mobile_number.startsWith('+') ? 
            `+${user.country_code} ${user.mobile_number}` : user.mobile_number) : 'Not provided';
    
    const addressParts = [
        user.address_line1,
        user.address_line2,
        user.city,
        user.country,
        user.zipcode
    ].filter(part => part && part.trim() !== '');
    
    const fullAddress = addressParts.length > 0 ? addressParts.join(', ') : 'Not provided';
    
    content.innerHTML = `
        <div class="registration-detail-grid">
            <div class="registration-detail-item">
                <div class="registration-detail-label">Username</div>
                <div class="registration-detail-value">${user.username || 'Not provided'}</div>
            </div>
            <div class="registration-detail-item">
                <div class="registration-detail-label">Full Name</div>
                <div class="registration-detail-value">${(user.name_prefix ? user.name_prefix + ' ' : '') + user.first_name + ' ' + user.last_name}</div>
            </div>
            <div class="registration-detail-item">
                <div class="registration-detail-label">Email Address</div>
                <div class="registration-detail-value">${user.email}</div>
            </div>
            <div class="registration-detail-item">
                <div class="registration-detail-label">Date of Birth</div>
                <div class="registration-detail-value">${user.dob || 'Not provided'}</div>
            </div>
            <div class="registration-detail-item">
                <div class="registration-detail-label">Account Type</div>
                <div class="registration-detail-value">${user.type}</div>
            </div>
            ${user.company_name ? `
            <div class="registration-detail-item">
                <div class="registration-detail-label">Company Name</div>
                <div class="registration-detail-value">${user.company_name}</div>
            </div>
            ` : ''}
            <div class="registration-detail-item">
                <div class="registration-detail-label">Mobile Number</div>
                <div class="registration-detail-value">${mobileDisplay}</div>
            </div>
            <div class="registration-detail-item">
                <div class="registration-detail-label">Complete Address</div>
                <div class="registration-detail-value">${fullAddress}</div>
            </div>
            <div class="registration-detail-item">
                <div class="registration-detail-label">Affiliate Type</div>
                <div class="registration-detail-value">${user.affiliate_type || 'Not provided'}</div>
            </div>
            <div class="registration-detail-item">
                <div class="registration-detail-label">Preferred Currency</div>
                <div class="registration-detail-value">${user.currency || 'Not provided'}</div>
            </div>
            ${user.chat_id_channel ? `
            <div class="registration-detail-item">
                <div class="registration-detail-label">Chat ID/Channel</div>
                <div class="registration-detail-value">${user.chat_id_channel}</div>
            </div>
            ` : ''}
            <div class="registration-detail-item">
                <div class="registration-detail-label">Security Question</div>
                <div class="registration-detail-value">${user.security_que || 'Not provided'}</div>
            </div>
            <div class="registration-detail-item">
                <div class="registration-detail-label">Security Answer</div>
                <div class="registration-detail-value">${user.security_ans || 'Not provided'}</div>
            </div>
            <div class="registration-detail-item">
                <div class="registration-detail-label">Registration Date</div>
                <div class="registration-detail-value">${new Date(user.created_at).toLocaleString()}</div>
            </div>
            <div class="registration-detail-item">
                <div class="registration-detail-label">Current Status</div>
                <div class="registration-detail-value">
                    <span class="status-badge ${user.status.replace(/\s+/g, '-').replace('awaiting-approval', 'awaiting')}">${user.status}</span>
                </div>
            </div>
            ${user.admin_remarks ? `
            <div class="registration-detail-item" style="grid-column: 1 / -1; border-left: 4px solid #17a2b8; background: #e7f3ff;">
                <div class="registration-detail-label" style="color: #0c5460;">Admin Remarks</div>
                <div class="registration-detail-value" style="color: #0c5460; font-style: italic;">${user.admin_remarks.replace(/\n/g, '<br>')}</div>
            </div>
            ` : ''}
        </div>
    `;
}

// Pagination Functions
function updatePagination(pagination) {
    totalPages = pagination.total_pages;
    totalRecords = pagination.total_records;
    currentPage = pagination.current_page;
    
    const paginationContainer = document.getElementById('pagination-container');
    const paginationInfo = document.getElementById('pagination-info-text');
    
    if (totalRecords === 0) {
        paginationContainer.style.display = 'none';
        return;
    }
    
    paginationContainer.style.display = 'flex';
    
    // Update pagination info
    const startRecord = ((currentPage - 1) * currentPerPage) + 1;
    const endRecord = Math.min(currentPage * currentPerPage, totalRecords);
    paginationInfo.textContent = `Showing ${startRecord} to ${endRecord} of ${totalRecords} entries`;
    
    // Update navigation buttons
    document.getElementById('first-page').disabled = currentPage === 1;
    document.getElementById('prev-page').disabled = currentPage === 1;
    document.getElementById('next-page').disabled = currentPage === totalPages;
    document.getElementById('last-page').disabled = currentPage === totalPages;
    
    // Generate page numbers
    generatePageNumbers();
}

function generatePageNumbers() {
    const numbersContainer = document.getElementById('pagination-numbers');
    numbersContainer.innerHTML = '';
    
    // Calculate page range to show
    const maxVisiblePages = 5;
    let startPage = Math.max(1, currentPage - Math.floor(maxVisiblePages / 2));
    let endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);
    
    // Adjust start page if we're near the end
    if (endPage - startPage + 1 < maxVisiblePages) {
        startPage = Math.max(1, endPage - maxVisiblePages + 1);
    }
    
    // Add ellipsis and first page if needed
    if (startPage > 1) {
        addPageNumber(1);
        if (startPage > 2) {
            addEllipsis();
        }
    }
    
    // Add visible page numbers
    for (let i = startPage; i <= endPage; i++) {
        addPageNumber(i);
    }
    
    // Add ellipsis and last page if needed
    if (endPage < totalPages) {
        if (endPage < totalPages - 1) {
            addEllipsis();
        }
        addPageNumber(totalPages);
    }
}

function addPageNumber(pageNum) {
    const numbersContainer = document.getElementById('pagination-numbers');
    const pageButton = document.createElement('button');
    pageButton.className = 'pagination-number' + (pageNum === currentPage ? ' active' : '');
    pageButton.textContent = pageNum;
    pageButton.onclick = () => goToPage(pageNum);
    numbersContainer.appendChild(pageButton);
}

function addEllipsis() {
    const numbersContainer = document.getElementById('pagination-numbers');
    const ellipsis = document.createElement('span');
    ellipsis.className = 'pagination-number';
    ellipsis.textContent = '...';
    ellipsis.style.cursor = 'default';
    ellipsis.style.border = 'none';
    ellipsis.style.background = 'transparent';
    numbersContainer.appendChild(ellipsis);
}

function goToPage(page) {
    if (page >= 1 && page <= totalPages && page !== currentPage) {
        loadApplications(page);
    }
}

function goToPreviousPage() {
    if (currentPage > 1) {
        goToPage(currentPage - 1);
    }
}

function goToNextPage() {
    if (currentPage < totalPages) {
        goToPage(currentPage + 1);
    }
}

function goToLastPage() {
    goToPage(totalPages);
}

function showEmailConfig() {
    document.getElementById('emailConfigModal').style.display = 'flex';
    loadEmailConfig();
}
